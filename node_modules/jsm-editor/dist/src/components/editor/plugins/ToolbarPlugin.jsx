"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
var LexicalComposerContext_1 = require("@lexical/react/LexicalComposerContext");
var utils_1 = require("@lexical/utils");
var lexical_1 = require("lexical");
var rich_text_1 = require("@lexical/rich-text");
var selection_1 = require("@lexical/selection");
var utils_2 = require("@lexical/utils");
var react_1 = __importDefault(require("react"));
var react_2 = require("react");
var LowPriority = 1;
function Divider() {
    return <div className="divider"/>;
}
function ToolbarPlugin() {
    var editor = (0, LexicalComposerContext_1.useLexicalComposerContext)()[0];
    var toolbarRef = (0, react_2.useRef)(null);
    var _a = (0, react_2.useState)(false), canUndo = _a[0], setCanUndo = _a[1];
    var _b = (0, react_2.useState)(false), canRedo = _b[0], setCanRedo = _b[1];
    var _c = (0, react_2.useState)(false), isBold = _c[0], setIsBold = _c[1];
    var _d = (0, react_2.useState)(false), isItalic = _d[0], setIsItalic = _d[1];
    var _e = (0, react_2.useState)(false), isUnderline = _e[0], setIsUnderline = _e[1];
    var _f = (0, react_2.useState)(false), isStrikethrough = _f[0], setIsStrikethrough = _f[1];
    var activeBlock = useActiveBlock();
    var $updateToolbar = (0, react_2.useCallback)(function () {
        var selection = (0, lexical_1.$getSelection)();
        if ((0, lexical_1.$isRangeSelection)(selection)) {
            // Update text format
            setIsBold(selection.hasFormat('bold'));
            setIsItalic(selection.hasFormat('italic'));
            setIsUnderline(selection.hasFormat('underline'));
            setIsStrikethrough(selection.hasFormat('strikethrough'));
        }
    }, []);
    (0, react_2.useEffect)(function () {
        return (0, utils_1.mergeRegister)(editor.registerUpdateListener(function (_a) {
            var editorState = _a.editorState;
            editorState.read(function () {
                $updateToolbar();
            });
        }), editor.registerCommand(lexical_1.SELECTION_CHANGE_COMMAND, function (_payload, _newEditor) {
            $updateToolbar();
            return false;
        }, LowPriority), editor.registerCommand(lexical_1.CAN_UNDO_COMMAND, function (payload) {
            setCanUndo(payload);
            return false;
        }, LowPriority), editor.registerCommand(lexical_1.CAN_REDO_COMMAND, function (payload) {
            setCanRedo(payload);
            return false;
        }, LowPriority));
    }, [editor, $updateToolbar]);
    function toggleBlock(type) {
        var selection = (0, lexical_1.$getSelection)();
        if (activeBlock === type) {
            return (0, selection_1.$setBlocksType)(selection, function () { return (0, lexical_1.$createParagraphNode)(); });
        }
        if (type === 'h1') {
            return (0, selection_1.$setBlocksType)(selection, function () { return (0, rich_text_1.$createHeadingNode)('h1'); });
        }
        if (type === 'h2') {
            return (0, selection_1.$setBlocksType)(selection, function () { return (0, rich_text_1.$createHeadingNode)('h2'); });
        }
        if (type === 'h3') {
            return (0, selection_1.$setBlocksType)(selection, function () { return (0, rich_text_1.$createHeadingNode)('h3'); });
        }
        if (type === 'quote') {
            return (0, selection_1.$setBlocksType)(selection, function () { return (0, rich_text_1.$createQuoteNode)(); });
        }
    }
    return (<div className="toolbar" ref={toolbarRef}>
      <button disabled={!canUndo} onClick={function () {
            editor.dispatchCommand(lexical_1.UNDO_COMMAND, undefined);
        }} className="toolbar-item spaced" aria-label="Undo">
        <i className="format undo"/>
      </button>
      <button disabled={!canRedo} onClick={function () {
            editor.dispatchCommand(lexical_1.REDO_COMMAND, undefined);
        }} className="toolbar-item" aria-label="Redo">
        <i className="format redo"/>
      </button>
      <Divider />
      <button onClick={function () { return editor.update(function () { return toggleBlock('h1'); }); }} data-active={activeBlock === 'h1' ? '' : undefined} className={'toolbar-item spaced ' + (activeBlock === 'h1' ? 'active' : '')}>
        <i className="format h1"/>
      </button>
      <button onClick={function () { return editor.update(function () { return toggleBlock('h2'); }); }} data-active={activeBlock === 'h2' ? '' : undefined} className={'toolbar-item spaced ' + (activeBlock === 'h2' ? 'active' : '')}>
        <i className="format h2"/>
      </button>
      <button onClick={function () { return editor.update(function () { return toggleBlock('h3'); }); }} data-active={activeBlock === 'h3' ? '' : undefined} className={'toolbar-item spaced ' + (activeBlock === 'h3' ? 'active' : '')}>
        <i className="format h3"/>
      </button>
      <Divider />
      <button onClick={function () {
            editor.dispatchCommand(lexical_1.FORMAT_TEXT_COMMAND, 'bold');
        }} className={'toolbar-item spaced ' + (isBold ? 'active' : '')} aria-label="Format Bold">
        <i className="format bold"/>
      </button>
      <button onClick={function () {
            editor.dispatchCommand(lexical_1.FORMAT_TEXT_COMMAND, 'italic');
        }} className={'toolbar-item spaced ' + (isItalic ? 'active' : '')} aria-label="Format Italics">
        <i className="format italic"/>
      </button>
      <button onClick={function () {
            editor.dispatchCommand(lexical_1.FORMAT_TEXT_COMMAND, 'underline');
        }} className={'toolbar-item spaced ' + (isUnderline ? 'active' : '')} aria-label="Format Underline">
        <i className="format underline"/>
      </button>
      <button onClick={function () {
            editor.dispatchCommand(lexical_1.FORMAT_TEXT_COMMAND, 'strikethrough');
        }} className={'toolbar-item spaced ' + (isStrikethrough ? 'active' : '')} aria-label="Format Strikethrough">
        <i className="format strikethrough"/>
      </button>
      <Divider />
      <button onClick={function () {
            editor.dispatchCommand(lexical_1.FORMAT_ELEMENT_COMMAND, 'left');
        }} className="toolbar-item spaced" aria-label="Left Align">
        <i className="format left-align"/>
      </button>
      <button onClick={function () {
            editor.dispatchCommand(lexical_1.FORMAT_ELEMENT_COMMAND, 'center');
        }} className="toolbar-item spaced" aria-label="Center Align">
        <i className="format center-align"/>
      </button>
      <button onClick={function () {
            editor.dispatchCommand(lexical_1.FORMAT_ELEMENT_COMMAND, 'right');
        }} className="toolbar-item spaced" aria-label="Right Align">
        <i className="format right-align"/>
      </button>
      <button onClick={function () {
            editor.dispatchCommand(lexical_1.FORMAT_ELEMENT_COMMAND, 'justify');
        }} className="toolbar-item" aria-label="Justify Align">
        <i className="format justify-align"/>
      </button>{' '}
    </div>);
}
exports.default = ToolbarPlugin;
function useActiveBlock() {
    var editor = (0, LexicalComposerContext_1.useLexicalComposerContext)()[0];
    var subscribe = (0, react_2.useCallback)(function (onStoreChange) {
        return editor.registerUpdateListener(onStoreChange);
    }, [editor]);
    var getSnapshot = (0, react_2.useCallback)(function () {
        return editor.getEditorState().read(function () {
            var selection = (0, lexical_1.$getSelection)();
            if (!(0, lexical_1.$isRangeSelection)(selection))
                return null;
            var anchor = selection.anchor.getNode();
            var element = anchor.getKey() === 'root'
                ? anchor
                : (0, utils_2.$findMatchingParent)(anchor, function (e) {
                    var parent = e.getParent();
                    return parent !== null && (0, lexical_1.$isRootOrShadowRoot)(parent);
                });
            if (element === null) {
                element = anchor.getTopLevelElementOrThrow();
            }
            if ((0, rich_text_1.$isHeadingNode)(element)) {
                return element.getTag();
            }
            return element.getType();
        });
    }, [editor]);
    return (0, react_2.useSyncExternalStore)(subscribe, getSnapshot, getSnapshot);
}
